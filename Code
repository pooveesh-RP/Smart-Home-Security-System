#define BLYNK_AUTH_TOKEN "Your_Blink-Auth-Token" 
#define BLYNK_TEMPLATE_ID "TMP_ID"
#define BLYNK_TEMPLATE_NAME "TMP_NAME" 
#include "esp_camera.h"
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
   
#define CAMERA_MODEL_AI_THINKER
#include "camera_pins.h"

char ssid[] = "Wifi name";
char pass[] = "Wifi password";
char auth[] = "your_Blink-Auth-Token";

#define REED_SWITCH_PIN 12
#define PIR_SENSOR_PIN 13
#define MOTOR_PIN 14

bool doorOpened = false;
bool motionDetected = false;
bool notified = false;

void startCameraServer();
void setupLedFlash(int pin);

void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.frame_size = FRAMESIZE_UXGA;
  config.pixel_format = PIXFORMAT_JPEG;
  config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;
  config.fb_location = CAMERA_FB_IN_PSRAM;
  config.jpeg_quality = 12;
  config.fb_count = 1;

  if (config.pixel_format == PIXFORMAT_JPEG) {
    if (psramFound()) {
      config.jpeg_quality = 10;
      config.fb_count = 2;
      config.grab_mode = CAMERA_GRAB_LATEST;
    } else {
      config.frame_size = FRAMESIZE_SVGA;
      config.fb_location = CAMERA_FB_IN_DRAM;
    }
  } else {
    config.frame_size = FRAMESIZE_240X240;
  }

  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }

  sensor_t *s = esp_camera_sensor_get();
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);
    s->set_brightness(s, 1);
    s->set_saturation(s, -2);
  }
  if (config.pixel_format == PIXFORMAT_JPEG) {
    s->set_framesize(s, FRAMESIZE_QVGA);
  }

#if defined(LED_GPIO_NUM)
  setupLedFlash(LED_GPIO_NUM);
#endif

  pinMode(REED_SWITCH_PIN, INPUT_PULLUP);
  pinMode(PIR_SENSOR_PIN, INPUT);
  pinMode(MOTOR_PIN, OUTPUT);

  digitalWrite(MOTOR_PIN, LOW);

  WiFi.begin(ssid, pass);
  WiFi.setSleep(false);

  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi Connected");

  startCameraServer();
  Serial.print("Camera Ready! Stream URL: http://");
  Serial.println(WiFi.localIP());

  Blynk.begin(auth, ssid, pass);
}

void loop() {
  Blynk.run();

  int reedState = digitalRead(REED_SWITCH_PIN);
  int pirState = digitalRead(PIR_SENSOR_PIN);

  if (reedState == HIGH) {
    if (!doorOpened) {
      Serial.println("Door Opened!");
      doorOpened = true;

      if (!notified) {
        String msg = "⚠ Intruder Detected! Camera: http://" + WiFi.localIP().toString();
        Blynk.logEvent("theft_alert", msg);
        Serial.println("Blynk Notification Sent.");
        notified = true;
      }
    }

    if (doorOpened == HIGH && pirState == LOW && !motionDetected) {
      Serial.println("Motion Detected!");
      motionDetected = true;

      digitalWrite(MOTOR_PIN, HIGH);
      delay(3000);
      digitalWrite(MOTOR_PIN, LOW);
    }

    delay(300); 
  } else {
    doorOpened = false;
    motionDetected = false;
    notified = false;
  }
}
